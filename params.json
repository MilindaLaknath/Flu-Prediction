{
  "name": "Flu-prediction",
  "tagline": "Predicting Future Flu Virus Strains with Machine Learning ",
  "body": "# Flu-Prediction\r\nThese programs predict future influenza virus strains based on previous trends in flu mutations. The prediction output is a list of floats. Each number in the float corresponds to a base pair:\r\nA to 1, T to 2, G to 3, and C to 4.\r\n###Talks\r\nCheck out my talks at <a href=\"https://www.youtube.com/watch?v=j325KOyV-hI\">PyData</a> and PyGotham.\r\n\r\n###License\r\nMIT\r\n\r\n###Dependencies\r\nPython 2.7 or greater with Numpy, Biopython, and Scikit-learn libraries installed.\r\n\r\n##To use:\r\nInput any HA (hemagglutinin) or NA (neuraminidase) flu protein sequence and it's corresponding child sequence into the program and it will output a predicted offspring of that specific flu strain.\r\n###Reading in a FASTA with Biopython\r\nUse the Biopython library to import a sequence (a FASTA file format). For example:\r\n```python\r\nfrom Bio import SeqIO\r\nsequence = SeqIO.parse('myfasta.fasta','fasta')\r\nparent_fasta = parent.fasta \r\nparent_seq = parent.seq\r\n\r\nchild_fasta = parent.fasta \r\nchild_seq = child.seq\r\n```\r\n\r\n###Encoding\r\nThen encode it with the Encoding_v2 module:\r\n```python\r\nfrom Encoding_v2 import encoding\r\nparent = []\r\nfor k in range(len(X0)):\r\n    encoded_parent = encoding(parent_seq[k])\r\n    parent.append(encoded_parent)\r\n    \r\nchild = []\r\nfor l in range(len(y0)):\r\n    encoded_child = encoding(child_seq[l])\r\n    child.append(encoded_child)\r\n```\r\nThis turns the sequence into a list of float64's.\r\nThen, give the X and y to the machine learning algorithm.\r\nEnter any machine learning algorithm (eg, RandomForestsRegressor, DecisionTreeRegressor, etc.) in the 'algorithm' parts of the code.\r\n\r\n###Fitting the model\r\nSubstitute \"algorithm\" for any scikit-learn model of your choosing.\r\n```python\r\nfrom sklearn.algorithms import algorithm\r\nalg = algorithm()\r\nalg.fit(X,y)\r\nalg.predict(new_X)\r\n```\r\nThe algorithm I use in this project is a Random Forests Regressor model:\r\n```python\r\nfrom sklearn.ensemble import RandomForestRegressor()\r\nrfr = RandomForestRegressor() # Specify and parameters in the parenthesis\r\nrfr.fit(X,y)\r\nrfr.predict(new_X)\r\n```\r\n\r\n###Computing accuracy using K-Fold cross-validation\r\n```python\r\nalgorithm_scores = cross_validation.cross_val_score(algorithm,X,y,cv=2)\r\nprint 'Algorithm Trees',algorithm_scores\r\nprint(\"Average Accuracy: %0.2f (+/- %0.2f)\" % (algorithm_scores.mean()*100, algorithm_scores.std() *100))\r\n```\r\n\r\n###Computing accuracy using Coefficient of determination (R^2 score):\r\n```python\r\ny_pred = algorithm.predict(X_test)\r\nprint 'Algorithm R2 score:', metrics.r2_score(y_test,y_pred,multioutput='variance_weighted')\r\n```\r\n\r\n###Computing accuracy using Mean Squared Error (MSE):\r\n```python\r\ny_pred = algorithm.predict(X_test)\r\nprint 'Algorithm R2 score:', metrics.mean_squared_error(y_test,y_pred,multioutput='variance_weighted')\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}